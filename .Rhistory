k_100$size
books_filtered %>% filter(k_100==27) %>%
mutate(Title=title,Author=first_author,`Average Rating`=average_rating*summary$average_rating[3],`Total User Ratings`=ratings_count*summary$ratings_count[3]) %>%
select(Title,Author,`Average Rating`,`Total User Ratings`)
ratings_cluster %>% group_by(book_id) %>% n()
ratings_cluster %>% group_by(book_id) %>% summarize(n())
set.seed(123)
ratings_matrix <- ratings_cluster %>% spread(key=book_id,value=rating)
#Assign training and test books
training_set_size <- 0.75*(ncol(ratings_matrix)-1)
ncol(ratings_matrix)
ncol(ratings_matrix)-1
#Assign training and test books
training_set_size <- 0.75*(ncol(ratings_matrix)-1)
traing_set_size
traning_set_size
training_set_size
75*.75
#Assign training and test books
training_set_size <- floor(0.75*(ncol(ratings_matrix)-1))
train <- sample(seq_len(ncol(ratings_matrix)-1),size=training_set_size)
train
training_matrix <- ratings_matrix[,train]
test_matrix <- ratings_matrix[,test]
test_matrix <- ratings_matrix[,-train]
training_matrix <- ratings_matrix[,c(1,train)]
View(training_matrix)
test_matrix <- ratings_matrix[,c(1,-train)]
test_matrix <- cbind(ratings_matrix[,1],ratings_matrix[,-train)])
test_matrix <- cbind(ratings_matrix[,1],ratings_matrix[,-train])
View(test_matrix)
test_matrix <- ratings_matrix[,-train]
View(test_matrix)
View(test_matrix)
na.omit(test_matrix)
complete.cases(test_matrix)
complete.cases(test_matrix[,-1])
View(test_matrix)
test_matrix[,-1]
test_matrix[1,-1]
complete.cases(test_matrix[1,-1])
?complete.cases
na.omit(test_matrix[5,-1])
apply(test_matrix[,-1],1,sum)
apply(test_matrix[,-1],1,sum(rm.na=TRUE))
?sum
apply(test_matrix[,-1],1,sum(na.rm = =TRUE))
apply(test_matrix[,-1],1,function(x) {sum(x,na.rm = =TRUE))
apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE))
apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})
#Remove rows of all NAs
test_matrix$total_ratings <- apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})
View(test_matrix)
#Remove rows of all NAs
apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})
#Remove rows of all NAs
cbind(test_matrix,apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)}))
#Remove rows of all NAs
cbind(test_matrix,total_ratings=apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)}))
#Remove rows of all NAs
test_matrix <- cbind(test_matrix,total_ratings=apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)}))
View(test_matrix)
test_matrix <- ratings_matrix[,-train]
#Remove rows of all NAs
test_matrix <- cbind(test_matrix,total_ratings=apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(total_ratings!=0)
View(test_matrix)
#Remove rows of all NAs
test_matrix <- cbind(test_matrix,avg_ratings=apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)/(ncol(test_matrix)-1)})) %>%
filter(avg_ratings!=0)
test_matrix <- ratings_matrix[,-train]
#Remove rows of all NAs
test_matrix <- cbind(test_matrix,avg_ratings=apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)/(ncol(test_matrix)-1)})) %>%
filter(avg_ratings!=0)
View(test_matrix)
test_matrix <- ratings_matrix[,-train]
#Remove rows of all NAs
test_matrix <- cbind(test_matrix,avg_ratings=apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)/sum(1,na.rm=TRUE)})) %>%
filter(avg_ratings!=0)
View(test_matrix)
#Remove rows of all NAs
test_matrix <- cbind(test_matrix,avg_ratings=apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)/count(x,na.rm=TRUE)})) %>%
filter(avg_ratings!=0)
test_matrix <- ratings_matrix[,-train]
#Remove rows of all NAs
test_matrix <- cbind(test_matrix,avg_ratings=apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)/count(x,na.rm=TRUE)})) %>%
filter(avg_ratings!=0)
#Remove rows of all NAs
test_matrix <- cbind(test_matrix,avg_ratings=apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(avg_ratings!=0)
View(test_matrix)
#Remove rows of all NAs
training_matrix <- cbind(training_matrix,ratings=apply(training_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(ratings!=0) %>% select(-ratings)
test_matrix <- cbind(test_matrix,ratings=apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(ratings!=0) %>% select(-ratings)
View(training_matrix)
ratings_cluster <- inner_join(ratings,clusters) %>% filter(k_100==27) %>% select(user_id,book_id,rating)
ratings_matrix <- ratings_cluster %>% spread(key=book_id,value=rating)
#Assign training and test books
training_set_size <- floor(0.75*(nrow(ratings_matrix)))
train <- sample(seq_len(nrow(ratings_matrix)),size=training_set_size)
training_matrix <- ratings_matrix[train,]
test_matrix <- ratings_matrix[-train,]
View(training_matrix)
#Remove rows of all NAs
training_matrix <- cbind(training_matrix,ratings=apply(training_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(ratings!=0) %>% select(-ratings)
test_matrix <- cbind(test_matrix,ratings=apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(ratings!=0) %>% select(-ratings)
ratings_cluster <- inner_join(ratings,clusters) %>% filter(k_100==27) %>% select(user_id,book_id,rating)
ratings_matrix <- ratings_cluster %>% spread(key=book_id,value=rating)
#Assign training and test books
training_set_size <- floor(0.75*(nrow(ratings_matrix)))
train <- sample(seq_len(nrow(ratings_matrix)),size=training_set_size)
training_matrix <- ratings_matrix[train,]
test_matrix <- ratings_matrix[-train,]
ratings_cluster <- inner_join(ratings,clusters) %>% filter(k_100==27) %>% select(user_id,book_id,rating)
ratings_matrix <- ratings_cluster %>% spread(key=book_id,value=rating)
#Assign training and test books
training_set_size <- floor(0.75*(ncol(ratings_matrix)-1))
train <- sample(seq_len(ncol(ratings_matrix)-1),size=training_set_size)
training_matrix <- ratings_matrix[,c(1,train)]
test_matrix <- ratings_matrix[,-train]
#Assign training and test books
training_set_size <- floor(0.75*(ncol(ratings_matrix)-1))
train <- sample(seq_len(ncol(ratings_matrix)-1),size=training_set_size)
training_matrix <- ratings_matrix[,c(1,train)]
test_matrix <- ratings_matrix[,-train]
#Remove rows of all NAs
training_matrix <- cbind(training_matrix,ratings=apply(training_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(ratings!=0) %>% select(-ratings)
test_matrix <- cbind(test_matrix,ratings=apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(ratings!=0) %>% select(-ratings)
#Remove rows of all NAs
training_matrix <- cbind(training_matrix,ratings=apply(training_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(ratings!=0) %>% select(-ratings)
test_matrix <- cbind(test_matrix,ratings=apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(ratings!=0) %>% select(-ratings)
#Remove rows of all NAs
training_matrix <- cbind(training_matrix,ratings=apply(training_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(ratings!=0) %>% select(-ratings)
ratings_cluster <- inner_join(ratings,clusters) %>% filter(k_100==27) %>% select(user_id,book_id,rating)
ratings_matrix <- ratings_cluster %>% spread(key=book_id,value=rating)
#Assign training and test books
training_set_size <- floor(0.75*(ncol(ratings_matrix)-1))
train <- sample(seq_len(ncol(ratings_matrix)-1),size=training_set_size)
training_matrix <- ratings_matrix[,c(1,train)]
test_matrix <- ratings_matrix[,-train]
#Remove rows of all NAs
training_matrix <- cbind(training_matrix,ratings=apply(training_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(ratings!=0) %>% select(-ratings)
View(training_matrix)
#This is a prototype of the book recommender system
#Uses cluster 27 from the k=100 k-means cluster analysis
library(tidyverse)
library(recommenderlab)
set.seed(123)
#Ratings without clustering
ratings <- read_csv('data/ratings.csv')
clusters <- read_csv('data/clusters.csv')
ratings_cluster <- inner_join(ratings,clusters) %>% filter(k_100==27) %>% select(user_id,book_id,rating)
ratings_matrix <- ratings_cluster %>% spread(key=book_id,value=rating)
#Assign training and test books
training_set_size <- floor(0.75*(ncol(ratings_matrix)-1))
train <- sample(seq_len(ncol(ratings_matrix)-1),size=training_set_size)
training_matrix <- ratings_matrix[,c(1,train)]
test_matrix <- ratings_matrix[,-train]
#Remove rows of all NAs
training_matrix <- cbind(training_matrix,ratings=apply(training_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(ratings!=0) %>% select(-ratings)
test_matrix <- cbind(test_matrix,ratings=apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(ratings!=0) %>% select(-ratings)
ratings_matrix <- as.data.frame(training_matrix) %>% column_to_rownames(var='user_id')
ratings_matrix <- as(as.matrix(training_matrix),'realRatingMatrix')
test_matrix
#This is a prototype of the book recommender system
#Uses cluster 27 from the k=100 k-means cluster analysis
library(tidyverse)
library(recommenderlab)
set.seed(123)
#Ratings without clustering
ratings <- read_csv('data/ratings.csv')
clusters <- read_csv('data/clusters.csv')
ratings_cluster <- inner_join(ratings,clusters) %>% filter(k_100==27) %>% select(user_id,book_id,rating)
ratings_matrix <- ratings_cluster %>% spread(key=book_id,value=rating)
#Assign training and test books
training_set_size <- floor(0.75*(ncol(ratings_matrix)-1))
train <- sample(seq_len(ncol(ratings_matrix)-1),size=training_set_size)
training_matrix <- ratings_matrix[,c(1,train)]
test_matrix <- ratings_matrix[,-train]
#Add columns of test books to training_matrix with all NAs
test_matrix_NAs[,-1] <- NA
#Remove rows of all NAs
training_matrix <- cbind(training_matrix,ratings=apply(training_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(ratings!=0) %>% select(-ratings)
test_matrix <- cbind(test_matrix,ratings=apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(ratings!=0) %>% select(-ratings)
#This is a prototype of the book recommender system
#Uses cluster 27 from the k=100 k-means cluster analysis
library(tidyverse)
library(recommenderlab)
set.seed(123)
#Ratings without clustering
ratings <- read_csv('data/ratings.csv')
clusters <- read_csv('data/clusters.csv')
ratings_cluster <- inner_join(ratings,clusters) %>% filter(k_100==27) %>% select(user_id,book_id,rating)
ratings_matrix <- ratings_cluster %>% spread(key=book_id,value=rating)
#Assign training and test books
training_set_size <- floor(0.75*(ncol(ratings_matrix)-1))
train <- sample(seq_len(ncol(ratings_matrix)-1),size=training_set_size)
training_matrix <- ratings_matrix[,c(1,train)]
test_matrix <- ratings_matrix[,-train]
#Add books from test_matrix back to training matrix with all NAs
test_matrix_NAs <- test_matrix[,-1]
test_matrix_NAs <- NA
training_matrix <- cbind(training_matrix,test_matrix_NAs)
#Add books from test_matrix back to training matrix with all NAs
test_matrix_NAs <- test_matrix[,-1]
test_matrix_NAs[,] <- NA
training_matrix <- ratings_matrix[,c(1,train)]
training_matrix <- cbind(training_matrix,test_matrix_NAs)
View(training_matrix)
#Remove rows of all NAs
training_matrix <- cbind(training_matrix,ratings=apply(training_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(ratings!=0) %>% select(-ratings)
test_matrix <- cbind(test_matrix,ratings=apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(ratings!=0) %>% select(-ratings)
training_matrix <- as.data.frame(training_matrix) %>% column_to_rownames(var='user_id')
training_matrix <- as(as.matrix(training_matrix),'realRatingMatrix')
cluster1 <- Recommender(ratings_matrix, method='UBCF', parameter=list(method='cosine'))
cluster1 <- Recommender(training_matrix, method='UBCF', parameter=list(method='cosine'))
cluster1_recommendations <- predict(cluster1,newdata=training_matrix,n=5)
cluster27 <- Recommender(training_matrix, method='UBCF', parameter=list(method='cosine'))
cluster27_recommendations <- predict(cluster27,newdata=training_matrix,n=5)
test_predictions_all <- as(cluster27_recommendations,'matrix') %>% as.data.frame() %>% rownames_to_column() %>%
rename(user_id=rowname)
test_prediction <- test_predictions_all[,-train]
write_csv(test_matrix[,1:2],'actual.csv')
write_csv(test_prediction[,1:2],'predicted.csv')
cluster27_recommendations <- predict(cluster27,newdata=training_matrix,n=75)
test_predictions_all <- as(cluster27_recommendations,'matrix') %>% as.data.frame() %>% rownames_to_column() %>%
rename(user_id=rowname)
test_prediction <- test_predictions_all[,-train]
write_csv(test_prediction[,1:2],'predicted.csv')
cluster27_recommendations <- predict(cluster27,newdata=training_matrix,n=100)
test_predictions_all <- as(cluster27_recommendations,'matrix') %>% as.data.frame() %>% rownames_to_column() %>%
rename(user_id=rowname)
View(test_predictions_all)
test_prediction <- test_predictions_all[,-train]
View(test_prediction)
View(test_predictions_all)
View(test_matrix)
test_prediction <- test_predictions_all[,c(1,57:76)]
test_predictions <- test_predictions_all[,c(1,57:76)]
View(test_predictions)
test_predictions <- test_predictions_all[,c(1,58:76)]
write_csv(test_predictions[,1:2],'predicted.csv')
write_csv(test_predictions[,1:2],'predicted.csv')
write_csv(test_matrix[,1:2],'actual.csv')
#Calculate SSE for predictions
(test_matrix[,2]-test_predictions[,2])^2
#Calculate SSE for predictions
sum((test_matrix[,2]-test_predictions[,2])^2,na.rm=TRUE)
#Calculate SSE for predictions
inner_join(test_matrix[,2],test_predictions[,2],by=c('user_id=user_id'))
#Calculate SSE for predictions
inner_join(test_matrix[,1:2],test_predictions[,1:2],by=c('user_id=user_id'))
test_matrix[,1:2]
test_predictions[,1:2]
#Calculate SSE for predictions
inner_join(test_matrix[,1:2],test_predictions[,1:2],by=c('user_id'='user_id'))
test_predictions_all <- as(cluster27_recommendations,'matrix') %>% as.data.frame() %>% rownames_to_column() %>%
rename(user_id=rowname) %>% mutate(user_id=as.integer(user_id))
test_predictions <- test_predictions_all[,c(1,58:76)]
#Calculate SSE for predictions
inner_join(test_matrix[,1:2],test_predictions[,1:2],by=c('user_id'='user_id'))
#Calculate SSE for predictions
actual_v_predict <- inner_join(test_matrix[,1:2],test_predictions[,1:2],by=c('user_id'='user_id'))
(actual_v_predict[,2]-actual_v_predict[,3])^2
sum((actual_v_predict[,2]-actual_v_predict[,3])^2,na.rm=TRUE)
#Calculate SSE for predictions
SSE <- test_matrix[1,]
SSE[,] <- 0
View(SSE)
View(SSE)
#Calculate SSE for predictions
SSE <- test_matrix[1,-1]
SSE[,] <- 0
View(SSE)
for (i in 1:(ncol(test_matrix)-1)) {
actual_v_predict <- inner_join(test_matrix[,c(1,i+1)],test_predictions[,c(1,i+1)],by=c('user_id'='user_id'))
SSE[i] <- sum((actual_v_predict[,2]-actual_v_predict[,3])^2,na.rm=TRUE)
rm(actual_v_predict)
}
View(SSE)
t(SSE)
#Calculate SSE for predictions
fit <- test_matrix[1,-1]
fit[,] <- 0
fit <- t(fit) %>% rownames_to_column(var='SSE')
fit <- data.frame(t(fit)) %>% rownames_to_column(var='SSE')
View(fit)
fit <- data.frame(t(fit)) %>% rownames_to_column(var='book_id') %>% rename(SSE=V1)
View(fit)
#Calculate SSE for predictions
fit <- test_matrix[1,-1]
fit[,] <- 0
fit <- data.frame(t(fit)) %>% rownames_to_column(var='book_id') %>% rename(SSE=X1)
fit$SST <- 0
fit$R_sq <- 0
View(fit)
for (i in 1:(ncol(test_matrix)-1)) {
actual_v_predict <- inner_join(test_matrix[,c(1,i+1)],test_predictions[,c(1,i+1)],by=c('user_id'='user_id'))
fit[i,1] <- sum((actual_v_predict[,2]-actual_v_predict[,3])^2,na.rm=TRUE)
avg <- mean(actual_v_predict[,2],na.rm=TRUE)
fit[i,2] <- sum((actual_v_predict[,2]-avg)^2,na.rm=TRUE)
rm(actual_v_predict)
}
View(fit)
#Calculate SSE for predictions
fit <- test_matrix[1,-1]
fit[,] <- 0
fit <- data.frame(t(fit)) %>% rownames_to_column(var='book_id') %>% rename(SSE=X1)
fit$SST <- 0
fit$R_sq <- 0
for (i in 1:(ncol(test_matrix)-1)) {
actual_v_predict <- inner_join(test_matrix[,c(1,i+1)],test_predictions[,c(1,i+1)],by=c('user_id'='user_id'))
fit[i,2] <- sum((actual_v_predict[,2]-actual_v_predict[,3])^2,na.rm=TRUE)
avg <- mean(actual_v_predict[,2],na.rm=TRUE)
fit[i,3] <- sum((actual_v_predict[,2]-avg)^2,na.rm=TRUE)
rm(actual_v_predict)
}
View(fit)
for (i in 1:(ncol(test_matrix)-1)) {
actual_v_predict <- inner_join(test_matrix[,c(1,i+1)],test_predictions[,c(1,i+1)],by=c('user_id'='user_id'))
fit$SSE[i] <- sum((actual_v_predict[,2]-actual_v_predict[,3])^2,na.rm=TRUE)
avg <- mean(actual_v_predict[,2],na.rm=TRUE)
fit$SST[i] <- sum((actual_v_predict[,2]-avg)^2,na.rm=TRUE)
rm(actual_v_predict)
}
fit$R_sq <- 1-(fit$SSE/fit$SST)
write_csv(inner_join(test_matrix[,c(1,17)],test_predictions[,c(1,17)],by=c('user_id'='user_id')),'temp.csv')
#Calculate SSE for predictions
fit <- test_matrix[1,-1]
fit[,] <- 0
fit <- data.frame(t(fit)) %>% rownames_to_column(var='book_id') %>% rename(SSE=X1)
for (i in 1:(ncol(test_matrix)-1)) {
actual_v_predict <- inner_join(test_matrix[,c(1,i+1)],test_predictions[,c(1,i+1)],by=c('user_id'='user_id'))
fit$SSE[i] <- sum((actual_v_predict[,2]-actual_v_predict[,3])^2,na.rm=TRUE)
rm(actual_v_predict)
}
actual_v_predict <- inner_join(test_matrix[,c(1,2)],test_predictions[,c(1,2)],by=c('user_id'='user_id'))
ggplot() + geom_point(actual_v_predicted,aes(x=actual_v_predict[,2],actual_v_predict[,3]))
ggplot() + geom_point(actual_v_predict,aes(x=actual_v_predict[,2],actual_v_predict[,3]))
ggplot() + geom_point(actual_v_predict,aes(x=actual_v_predict[,2],actual_v_predict[,3]))
View(actual_v_predict)
ggplot() +
geom_point(actual_v_predict,aes(x=2549.x,y=2549.y))
ggplot() +
geom_point(actual_v_predict,aes(x=`2549.x`,y=`2549.y`))
ggplot() +
geom_point(data=actual_v_predict,aes(x=`2549.x`,y=`2549.y`))
ggplot() +
geom_boxplot(data=actual_v_predict,aes(x=`2549.x`,y=`2549.y`))
?geom_boxplot
geom_boxplot(data=actual_v_predict,aes(x=`2549.x`,y=`2549.y`)
ggplot() +
geom_boxplot(data=actual_v_predict,aes(x=`2549.x`,y=`2549.y`))
ggplot() +
geom_boxplot(data=actual_v_predict,aes(x=as.factor(`2549.x`),y=`2549.y`))
books %>% filter(book_id=2549)
ggplot() +
geom_boxplot(data=actual_v_predict,aes(x=as.factor(`2549.x`),y=`2549.y`)) +
labs(title='Rating Prediction Accuracy for Blue Moon (Anita Blake, Vampire Hunter, #8) by Laurell K. Hamilton',
x='Actual User Rating', y='Predicted User Rating') +
scale_x_discrete(limits=c(1:5))
ggplot() +
geom_boxplot(data=actual_v_predict,aes(x=as.factor(`2549.x`),y=`2549.y`)) +
labs(title='Rating Prediction Accuracy for Blue Moon (Anita Blake, Vampire Hunter, #8) by Laurell K. Hamilton',
x='Actual User Rating', y='Predicted User Rating') +
scale_x_discrete(limits=c(1:5)) +
theme(axis.ticks.y=element_blank(),
panel.background=element_rect(fill='white'),
panel.grid.major.x=element_line(color='gray'),
legend.position='none')
ggplot() +
geom_boxplot(data=actual_v_predict,aes(x=as.factor(`2549.x`),y=`2549.y`)) +
labs(title='Rating Prediction Accuracy for Blue Moon (Anita Blake, Vampire Hunter, #8) by Laurell K. Hamilton',
x='Actual User Rating', y='Predicted User Rating') +
scale_x_discrete(limits=c(1:5)) +
theme(axis.ticks.y=element_blank(),
panel.background=element_rect(fill='white'),
panel.grid.major.y=element_line(color='gray'),
legend.position='none')
library(stringr)
ggplot() +
geom_boxplot(data=actual_v_predict,aes(x=as.factor(`2549.x`),y=`2549.y`)) +
labs(title=str_wrap('Rating Prediction Accuracy for Blue Moon (Anita Blake, Vampire Hunter, #8) by Laurell K. Hamilton',width=75),
x='Actual User Rating', y='Predicted User Rating') +
scale_x_discrete(limits=c(1:5)) +
theme(axis.ticks.y=element_blank(),
panel.background=element_rect(fill='white'),
panel.grid.major.y=element_line(color='gray'),
legend.position='none')
ggplot() +
geom_boxplot(data=actual_v_predict,aes(x=as.factor(`2549.x`),y=`2549.y`)) +
labs(title=str_wrap('Rating Prediction Accuracy for Blue Moon (Anita Blake, Vampire Hunter, #8) by Laurell K. Hamilton',width=70),
x='Actual User Rating', y='Predicted User Rating') +
scale_x_discrete(limits=c(1:5)) +
theme(axis.ticks.y=element_blank(),
panel.background=element_rect(fill='white'),
panel.grid.major.y=element_line(color='gray'),
legend.position='none')
actual_v_predict <- inner_join(test_matrix[,c(1,11)],test_predictions[,c(1,11)],by=c('user_id'='user_id'))
ggplot() +
geom_boxplot(data=actual_v_predict,aes(x=as.factor(`3445.x`),y=`3445.y`)) +
labs(title=str_wrap('Rating Prediction Accuracy for Succubus Blues (Georgina Kincaid, #1) by Richelle Mead',width=70),
x='Actual User Rating', y='Predicted User Rating') +
scale_x_discrete(limits=c(1:5)) +
theme(axis.ticks.y=element_blank(),
panel.background=element_rect(fill='white'),
panel.grid.major.y=element_line(color='gray'),
legend.position='none')
actual_v_predict <- inner_join(test_matrix[,c(1,20)],test_predictions[,c(1,20)],by=c('user_id'='user_id'))
ggplot() +
geom_boxplot(data=actual_v_predict,aes(x=as.factor(`9593.x`),y=`9593.y`)) +
labs(title=str_wrap('Rating Prediction Accuracy for The Rapture of Canaan by Sheri Reynolds',width=70),
x='Actual User Rating', y='Predicted User Rating') +
scale_x_discrete(limits=c(1:5)) +
theme(axis.ticks.y=element_blank(),
panel.background=element_rect(fill='white'),
panel.grid.major.y=element_line(color='gray'),
legend.position='none')
cluster_boosk <- books_filtered %>% filter(k_100==27) %>% top_n(20,ratings_count) %>%
mutate(Title=title,Author=first_author,`Average Rating`=average_rating*summary$average_rating[3],`Total User Ratings`=ratings_count*summary$ratings_count[3]) %>%
select(Title,Author,`Average Rating`,`Total User Ratings`)
source('C:/Erika/Data Incubator/Challenge/book_recommender/kmeans.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE, fig.width=6, fig.height=8)
library(tidyverse)
library(stringr)
library(knitr)
library(recommenderlab)
set.seed(123)
#Ratings without clustering
ratings <- read_csv('data/ratings.csv')
clusters <- read_csv('data/clusters.csv')
ratings_cluster <- inner_join(ratings,clusters) %>% filter(k_100==27) %>% select(user_id,book_id,rating)
ratings_matrix <- ratings_cluster %>% spread(key=book_id,value=rating)
#Assign training and test books
training_set_size <- floor(0.75*(ncol(ratings_matrix)-1))
train <- sample(seq_len(ncol(ratings_matrix)-1),size=training_set_size)
training_matrix <- ratings_matrix[,c(1,train)]
test_matrix <- ratings_matrix[,-train]
#Add books from test_matrix back to training matrix with all NAs
test_matrix_NAs <- test_matrix[,-1]
test_matrix_NAs[,] <- NA
training_matrix <- cbind(training_matrix,test_matrix_NAs)
#Remove rows of all NAs
training_matrix <- cbind(training_matrix,ratings=apply(training_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(ratings!=0) %>% select(-ratings)
test_matrix <- cbind(test_matrix,ratings=apply(test_matrix[,-1],1,function(x) {sum(x,na.rm=TRUE)})) %>%
filter(ratings!=0) %>% select(-ratings)
training_matrix <- as.data.frame(training_matrix) %>% column_to_rownames(var='user_id')
training_matrix <- as(as.matrix(training_matrix),'realRatingMatrix')
cluster27 <- Recommender(training_matrix, method='UBCF', parameter=list(method='cosine'))
cluster27_recommendations <- predict(cluster27,newdata=training_matrix,n=100)
test_predictions_all <- as(cluster27_recommendations,'matrix') %>% as.data.frame() %>% rownames_to_column() %>%
rename(user_id=rowname) %>% mutate(user_id=as.integer(user_id))
test_predictions <- test_predictions_all[,c(1,58:76)]
actual_v_predict <- inner_join(test_matrix[,c(1,11)],test_predictions[,c(1,11)],by=c('user_id'='user_id'))
actual_v_predict <- inner_join(test_matrix[,c(1,11)],test_predictions[,c(1,11)],by=c('user_id'='user_id')) %>%
filter(!is.na(`3445.x`))
View(actual_v_predict)
ggplot() +
geom_boxplot(data=actual_v_predict,aes(x=as.factor(`3445.x`),y=`3445.y`)) +
labs(title=str_wrap('Rating Prediction Accuracy for Book 3445 Succubus Blues (Georgina Kincaid, #1) by Richelle Mead',width=70),
x='Actual User Rating', y='Predicted User Rating') +
scale_x_discrete(limits=c(1:5)) +
theme(axis.ticks.y=element_blank(),
panel.background=element_rect(fill='white'),
panel.grid.major.y=element_line(color='gray'),
legend.position='none')
actual_v_predict <- inner_join(test_matrix[,c(1,2)],test_predictions[,c(1,2)],by=c('user_id'='user_id')) %>%
filter(!is.na(`2549.x`))
ggplot() +
geom_boxplot(data=actual_v_predict,aes(x=as.factor(`2549.x`),y=`2549.y`)) +
labs(title=str_wrap('Rating Prediction Accuracy for Book 2549 Blue Moon (Anita Blake, Vampire Hunter, #8) by Laurell K. Hamilton',width=70),
x='Actual User Rating', y='Predicted User Rating') +
scale_x_discrete(limits=c(1:5)) +
theme(axis.ticks.y=element_blank(),
panel.background=element_rect(fill='white'),
panel.grid.major.y=element_line(color='gray'),
legend.position='none')
ggplot() +
geom_boxplot(data=actual_v_predict,aes(x=as.factor(`3445.x`),y=`3445.y`)) +
labs(title=str_wrap('Rating Prediction Accuracy for Book 3445 Succubus Blues (Georgina Kincaid, #1) by Richelle Mead',width=70),
x='Actual User Rating', y='Predicted User Rating') +
theme(axis.ticks.y=element_blank(),
panel.background=element_rect(fill='white'),
panel.grid.major.y=element_line(color='gray'),
legend.position='none')
actual_v_predict <- inner_join(test_matrix[,c(1,11)],test_predictions[,c(1,11)],by=c('user_id'='user_id')) %>%
filter(!is.na(`3445.x`))
ggplot() +
geom_boxplot(data=actual_v_predict,aes(x=as.factor(`3445.x`),y=`3445.y`)) +
labs(title=str_wrap('Rating Prediction Accuracy for Book 3445 Succubus Blues (Georgina Kincaid, #1) by Richelle Mead',width=70),
x='Actual User Rating', y='Predicted User Rating') +
theme(axis.ticks.y=element_blank(),
panel.background=element_rect(fill='white'),
panel.grid.major.y=element_line(color='gray'),
legend.position='none')
